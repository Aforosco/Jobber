// <auto-generated />
using System;
using Joberguy.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Joberguy.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250302055022_AddAddressTable")]
    partial class AddAddressTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.8");

            modelBuilder.Entity("Joberguy.Data.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Joberguy.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Joberguy.Data.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobLocation")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobRequirement")
                        .HasColumnType("TEXT");

                    b.Property<string>("JobTitle")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("expiringDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("postDateTime")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("jobs");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            JobDescription = "Develop and maintain software applications.",
                            JobLocation = "New York, USA",
                            JobRequirement = "C#, .NET, SQL",
                            JobTitle = "Software Engineer",
                            expiringDate = new DateTime(2025, 4, 1, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4420),
                            postDateTime = new DateTime(2025, 3, 2, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4420)
                        },
                        new
                        {
                            Id = -2,
                            JobDescription = "Analyze data and generate reports.",
                            JobLocation = "San Francisco, USA",
                            JobRequirement = "Python, SQL, Power BI",
                            JobTitle = "Data Analyst",
                            expiringDate = new DateTime(2025, 4, 1, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4430),
                            postDateTime = new DateTime(2025, 3, 2, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4420)
                        },
                        new
                        {
                            Id = -3,
                            JobDescription = "Protect company assets from cyber threats.",
                            JobLocation = "London, UK",
                            JobRequirement = "Network Security, Ethical Hacking",
                            JobTitle = "Cybersecurity Specialist",
                            expiringDate = new DateTime(2025, 4, 1, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4430),
                            postDateTime = new DateTime(2025, 3, 2, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4430)
                        },
                        new
                        {
                            Id = -4,
                            JobDescription = "Design user-friendly interfaces.",
                            JobLocation = "Remote",
                            JobRequirement = "Figma, Adobe XD, HTML/CSS",
                            JobTitle = "UX/UI Designer",
                            expiringDate = new DateTime(2025, 4, 1, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4430),
                            postDateTime = new DateTime(2025, 3, 2, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4430)
                        },
                        new
                        {
                            Id = -5,
                            JobDescription = "Manage project timelines and resources.",
                            JobLocation = "Berlin, Germany",
                            JobRequirement = "Agile, Scrum, PMP",
                            JobTitle = "Project Manager",
                            expiringDate = new DateTime(2025, 4, 1, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4440),
                            postDateTime = new DateTime(2025, 3, 2, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4430)
                        },
                        new
                        {
                            Id = -6,
                            JobDescription = "Develop AI models and algorithms.",
                            JobLocation = "Toronto, Canada",
                            JobRequirement = "TensorFlow, Machine Learning, Python",
                            JobTitle = "AI Engineer",
                            expiringDate = new DateTime(2025, 4, 1, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4440),
                            postDateTime = new DateTime(2025, 3, 2, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4440)
                        },
                        new
                        {
                            Id = -8,
                            JobDescription = "Maintain CI/CD pipelines.",
                            JobLocation = "Sydney, Australia",
                            JobRequirement = "AWS, Kubernetes, Docker",
                            JobTitle = "DevOps Engineer",
                            expiringDate = new DateTime(2025, 4, 1, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4440),
                            postDateTime = new DateTime(2025, 3, 2, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4440)
                        },
                        new
                        {
                            Id = -9,
                            JobDescription = "Develop and execute marketing strategies.",
                            JobLocation = "Paris, France",
                            JobRequirement = "SEO, Google Ads, Content Marketing",
                            JobTitle = "Marketing Manager",
                            expiringDate = new DateTime(2025, 4, 1, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4450),
                            postDateTime = new DateTime(2025, 3, 2, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4440)
                        },
                        new
                        {
                            Id = -10,
                            JobDescription = "Manage hiring and employee relations.",
                            JobLocation = "Dubai, UAE",
                            JobRequirement = "HR Management, Recruitment",
                            JobTitle = "HR Specialist",
                            expiringDate = new DateTime(2025, 4, 1, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4450),
                            postDateTime = new DateTime(2025, 3, 2, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4450)
                        },
                        new
                        {
                            Id = -11,
                            JobDescription = "Develop decentralized applications.",
                            JobLocation = "Singapore",
                            JobRequirement = "Solidity, Ethereum, Smart Contracts",
                            JobTitle = "Blockchain Developer",
                            expiringDate = new DateTime(2025, 4, 1, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4450),
                            postDateTime = new DateTime(2025, 3, 2, 5, 50, 22, 615, DateTimeKind.Local).AddTicks(4450)
                        });
                });

            modelBuilder.Entity("Joberguy.Data.JobApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("AddressId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApplicantLastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("ApplicatFirstName")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .HasColumnType("TEXT");

                    b.Property<int>("Gender")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("HasApplied")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobDescription")
                        .HasColumnType("TEXT");

                    b.Property<int>("JobId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("JobLocation")
                        .HasColumnType("TEXT");

                    b.Property<string>("Nationality")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("JobId");

                    b.HasIndex("UserId");

                    b.ToTable("applications");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Joberguy.Data.JobApplication", b =>
                {
                    b.HasOne("Joberguy.Data.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("Joberguy.Data.Job", "Job")
                        .WithMany("JobApplications")
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Joberguy.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Address");

                    b.Navigation("Job");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Joberguy.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Joberguy.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Joberguy.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Joberguy.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Joberguy.Data.Job", b =>
                {
                    b.Navigation("JobApplications");
                });
#pragma warning restore 612, 618
        }
    }
}
